* Troubleshooting
Error: [CDC:ErrMySQLConnectionError]fail to open MySQL connection: Error 1298: Unknown or incorrect time zone: 'UTC'

mysql_tzinfo_to_sql /usr/share/zoneinfo | sudo mysql -u root mysql

* Flow

https://cn.pingcap.com/blog/ticdc-source-code-reading-3

campaign owner
tiflow/cdc/capture/capture.go:348             -> capture.(*captureImpl).run
tiflow/cdc/capture/capture.go:483             -> capture.(*captureImpl).campaignOwner
tiflow/cdc/capture/capture.go:520             -> capture.(*captureImpl).runEtcdWorker
tiflow/pkg/orchestrator/etcd_worker.go:290    -> orchestrator.(*EtcdWorker).Run
tiflow/cdc/owner/owner.go:222                 -> owner.(*ownerImpl).Tick
tiflow/cdc/owner/changefeed.go:200            -> owner.(*changefeed).Tick
tiflow/cdc/owner/changefeed.go:273            -> owner.(*changefeed).tick
tiflow/cdc/owner/changefeed.go:413            -> owner.(*changefeed).initialize


processorManager
tiflow/cdc/capture/capture.go:374             -> capture.(*captureImpl).run
tiflow/cdc/capture/capture.go:520             -> capture.(*captureImpl).runEtcdWorker
tiflow/pkg/orchestrator/etcd_worker.go:290    -> orchestrator.(*EtcdWorker).Run
tiflow/cdc/processor/manager.go:142           -> processor.(*managerImpl).Tick
tiflow/cdc/processor/processor.go:595         -> processor.(*processor).Tick


** write data into DB
tiflow/cdc/capture/capture.go:374                      -> capture.(*captureImpl).run
tiflow/cdc/capture/capture.go:520                      -> capture.(*captureImpl).runEtcdWorker
tiflow/pkg/orchestrator/etcd_worker.go:290             -> orchestrator.(*EtcdWorker).Run
tiflow/cdc/processor/manager.go:142                    -> processor.(*managerImpl).Tick
tiflow/cdc/processor/processor.go:617                  -> processor.(*processor).Tick
tiflow/cdc/processor/processor.go:689                  -> processor.(*processor).tick
tiflow/cdc/processor/processor.go:826                  -> processor.(*processor).lazyInitImpl
tiflow/cdc/processor/sinkmanager/manager.go:121        -> sinkmanager.New
tiflow/cdc/sinkv2/eventsink/factory/factory.go:62      -> factory.New
tiflow/cdc/sinkv2/eventsink/txn/txn_sink.go:86         -> txn.NewMySQLSink
tiflow/cdc/sinkv2/eventsink/txn/txn_sink.go:57         -> txn.newSink
tiflow/cdc/sinkv2/eventsink/txn/worker.go:110          -> runBackgroundLoop
tiflow/cdc/sinkv2/eventsink/txn/worker.go:163          -> txn.(*worker).runBackgroundLoop 
tiflow/cdc/sinkv2/eventsink/txn/worker.go:209          -> txn.(*worker).doFlush
tiflow/cdc/sinkv2/eventsink/txn/mysql/mysql.go:138     -> mysql.(*mysqlBackend).Flush



tiflow/pkg/causality/conflict_detector.go:68           -> causality.NewConflictDetector
tiflow/pkg/causality/conflict_detector.go:109          -> causality.(*ConflictDetector[...]).runBackgroundTasks
tiflow/pkg/causality/internal/node.go:236              -> internal.(*Node).maybeResolve.func1
tiflow/pkg/causality/internal/node.go:213              -> internal.(*Node).assignTo
tiflow/pkg/causality/conflict_detector.go:85           -> causality.(*ConflictDetector[...]).Add.func1
tiflow/pkg/causality/conflict_detector.go:129          -> causality.(*ConflictDetector[...]).sendToWorker
tiflow/cdc/sinkv2/eventsink/txn/worker.go:91           -> txn.(*worker).Add


*** Details
#+BEGIN_SRC
                        case txn := <-w.txnCh.Out():
                                w.hasPending = true
                                log.Info("events 001", zap.String("txn", fmt.Sprintf("%#v %#v %#v %#v %#v", txn.txnEvent.TxnCallbackableEvent.Event.Table, txn.txnEvent.TxnCallbackableEvent.Event.TableInfo, txn.txnEvent.TxnCallbackableEvent.Event.StartTs, txn.txnEvent.TxnCallbackableEvent.Event.CommitTs, txn.txnEvent.TxnCallbackableEvent.Event.Rows)))
                                if w.onEvent(txn) && w.doFlush(&flushTimeSlice) {
                                        break Loop
                                }
#+END_SRC
txn="&model.TableName{Schema:\"test\", Table:\"test01\", TableID:88, IsPartition:false} &model.TableInfo{TableInfo:(*model.TableInfo)(0xc000e4cb60), SchemaID:2, TableName:model.TableName{Schema:\"test\", Table:\"test01\", TableID:88, IsPartition:false}, Version:0x618d520e9380003, columnsOffset:map[int64]int{1:0}, indicesOffset:map[int64]int{}, uniqueColumns:map[int64]struct {}{1:struct {}{}}, RowColumnsOffset:map[int64]int{1:0}, ColumnsFlag:map[int64]model.ColumnFlagType{1:0xb}, handleColID:[]int64{1}, HandleIndexID:-1, IndexColumnsOffset:[][]int{[]int{0}}, rowColInfos:[]rowcodec.ColInfo{rowcodec.ColInfo{ID:1, IsPKHandle:true, VirtualGenCol:false, Ft:(*types.FieldType)(0xc0002f5d50)}}, rowColFieldTps:map[int64]*types.FieldType{1:(*types.FieldType)(0xc0002f5d50)}} 0x618d73dd0500005 0x618d73dd0500006 []*model.RowChangedEvent{(*model.RowChangedEvent)(0xc0033fc640)}


** DDL
tiflow/cdc/owner/ddl_sink.go:169                      -> owner.(*ddlSinkImpl).run.func1 
tiflow/cdc/owner/ddl_sink.go:135                      -> owner.ddlSinkInitializer 
tiflow/cdc/sinkv2/ddlsink/factory/factory.go:51       -> factory.New
tiflow/cdc/sinkv2/ddlsink/mysql/mysql_ddl_sink.go:68  -> mysql.NewMySQLDDLSink 


github.com/pingcap/tiflow/cdc/sinkv2/ddlsink/mysql.(*mysqlDDLSink).WriteDDLEvent\n\tgithub.com/pingcap/tiflow/cdc/sinkv2/ddlsink/mysql/mysql_ddl_sink.go:101\ngithub.com/pingcap/tiflow/cdc/owner.(*ddlSinkImpl).run.func1\n\tgithub.com/pingcap/tiflow/cdc/owner/ddl_sink.go:248


DDL=
{"StartTs":439418232165105681
,"CommitTs":439418232165105687
,"Query":"CREATE TABLE `test04` (`col01` INT PRIMARY KEY)"
,"TableInfo":{
    "id":92
  , "name":{"O":"test04","L":"test04"}
  , "charset":"utf8mb4"
  , "collate":"utf8mb4_bin"
  , "cols":[
      {   "id":1
        , "name": {"O":"col01","L":"col01"}
        , "offset":0
        , "origin_default":null
        , "origin_default_bit":null
        , "default":null
        , "default_bit":null
        , "default_is_expr":false
        , "generated_expr_string":""
        , "generated_stored":false
        , "dependences":null
        , "type": {"Tp":3,"Flag":4099,"Flen":11,"Decimal":0,"Charset":"binary","Collate":"binary","Elems":null,"ElemsIsBinaryLit":null}
        , "state":5
        , "comment":""
        , "hidden":false
        , "change_state_info":null
        , "version":2}]
  , "index_info":null
  , "constraint_info":null
  , "fk_info":null
  , "state":5
  , "pk_is_handle":true
  , "is_common_handle":false
  , "common_handle_version":0
  , "comment":""
  , "auto_inc_id":0
  , "auto_id_cache":0
  , "auto_rand_id":0
  , "max_col_id":1
  , "max_idx_id":0
  , "max_fk_id":0
  , "max_cst_id":0
  , "update_timestamp":439418232165105681
  , "ShardRowIDBits":0
  , "max_shard_row_id_bits":0
  , "auto_random_bits":0
  , "auto_random_range_bits":0
  , "pre_split_regions":0
  , "partition":null
  , "compression":""
  , "view":null
  , "sequence":null
  , "Lock":null
  , "version":5
  , "tiflash_replica":null
  , "is_columnar":false
  , "temp_table_type":0
  , "cache_table_status":0
  , "policy_ref_info":null
  , "stats_options":null
  , "exchange_partition_info":null
  , "ttl_info":null
  , "SchemaID":2
  , "TableName":{"db-name":"test","tbl-name":"test04","tbl-id":92,"is-partition":false}
  , "Version":439418232165105687
  , "RowColumnsOffset":{"1":0}
  , "ColumnsFlag":{"1":11}
  , "HandleIndexID":-1,"IndexColumnsOffset":[[0]]}
,"PreTableInfo":null
,"Type":3
,"Done":false}


value01, fieldTypes,  colInfos := ddl.TableInfo.GetRowColInfos()

&types.FieldType{tp:0x3, flag:0x1003, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}
&types.FieldType{tp:0x3, flag:0x0, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}


rowcodec.ColInfo{ID:1, IsPKHandle:true, VirtualGenCol:false, Ft:(*types.FieldType)(0xc004d8d8f0)}
    types.FieldType{tp:0x3, flag:0x1003, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}
    &model.ColumnInfo{
        ID:1
      , Name:model.CIStr{O:\"col01\", L:\"col01\"}
      , Offset:0
      , OriginDefaultValue:interface {}(nil)
      , OriginDefaultValueBit:[]uint8(nil)
      , DefaultValue:interface {}(nil)
      , DefaultValueBit:[]uint8(nil)
      , DefaultIsExpr:false
      , GeneratedExprString:\"\"
      , GeneratedStored:false
      , Dependences:map[string]struct {}(nil)
      , FieldType:types.FieldType{tp:0x3, flag:0x1003, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}
      , State:0x5
      , Comment:\"\"
      , Hidden:false
      , ChangeStateInfo:(*model.ChangeStateInfo)(nil), Version:0x2}"

rowcodec.ColInfo{ID:2, IsPKHandle:false, VirtualGenCol:false, Ft:(*types.FieldType)(0xc004d8d960)}
    types.FieldType{tp:0x3, flag:0x0, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}
    &model.ColumnInfo{ID:2, Name:model.CIStr{O:\"col02\", L:\"col02\"}, Offset:1, OriginDefaultValue:interface {}(nil), OriginDefaultValueBit:[]uint8(nil), DefaultValue:interface {}(nil), DefaultValueBit:[]uint8(nil), DefaultIsExpr:false, GeneratedExprString:\"\", GeneratedStored:false, Dependences:map[string]struct {}(nil), FieldType:types.FieldType{tp:0x3, flag:0x0, flen:11, decimal:0, charset:\"binary\", collate:\"binary\", elems:[]string(nil), elemsIsBinaryLit:[]bool(nil)}, State:0x5, Comment:\"\", Hidden:false, ChangeStateInfo:(*model.ChangeStateInfo)(nil), Version:0x2}"
